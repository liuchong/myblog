<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[大大大大大]]></title><description><![CDATA[ 一个博客.]]></description><link>https://blakat.cc</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 09 May 2022 04:09:14 GMT</lastBuildDate><item><title><![CDATA[用 github.dev 写博客]]></title><description><![CDATA[上回说到可以 用 gatsby 和 github workflow 写博客，支持在在线编辑，自动发布，最近出了个 github.dev，这么一来写博客就更方便了。 上回文章在这里看 https://blakat.cc/write-and-publish-blog-with…]]></description><link>https://blakat.cc/write-blog-with-github-dev/</link><guid isPermaLink="false">https://blakat.cc/write-blog-with-github-dev/</guid><pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;上回说到可以 &lt;a href=&quot;https://github.com/liuchong/myblog/blob/master/content/blog/write-and-publish-blog-with-gatsby-and-github-workflow/index.md&quot;&gt;用 gatsby 和 github workflow 写博客，支持在在线编辑，自动发布&lt;/a&gt;，最近出了个 github.dev，这么一来写博客就更方便了。&lt;/p&gt;
&lt;h3&gt;上回文章在这里看&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blakat.cc/write-and-publish-blog-with-gatsby-and-github-workflow/&quot;&gt;https://blakat.cc/write-and-publish-blog-with-gatsby-and-github-workflow/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/liuchong/myblog/blob/master/content/blog/write-and-publish-blog-with-gatsby-and-github-workflow/index.md&quot;&gt;https://github.com/liuchong/myblog/blob/master/content/blog/write-and-publish-blog-with-gatsby-and-github-workflow/index.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;这次使用 github.dev 写&lt;/h3&gt;
&lt;p&gt;之前 &lt;a href=&quot;https://github.com/liuchong/myblog/blob/master/content/blog/write-and-publish-blog-with-gatsby-and-github-workflow/index.md#%E4%BB%8E%E7%BD%91%E9%A1%B5%E5%8F%91%E5%B8%83&quot;&gt;从网页发布&lt;/a&gt; 一节提到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;到仓库页面 &lt;a href=&quot;https://github.com/liuchong/myblog/tree/master/content/blog&quot;&gt;https://github.com/liuchong/myblog/tree/master/content/blog&lt;/a&gt; 点击 &lt;strong&gt;Add file -&gt; Create new file&lt;/strong&gt; 然后填入 &lt;code class=&quot;language-text&quot;&gt;my-title/index.md&lt;/code&gt;，写就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在可以直接访问 &lt;a href=&quot;https://github.dev/liuchong/myblog&quot;&gt;https://github.dev/liuchong/myblog&lt;/a&gt; 然后在 content/blog 下面新建一个目录比如 &lt;a href=&quot;https://github.com/liuchong/myblog/tree/master/content/blog/write-blog-with-github-dev&quot;&gt;write-blog-with-github-dev&lt;/a&gt;，再创建一个 index.md，开始写就好了。跟普通编辑器一样，可以打开多个文件，可以预览 markdown。在浏览器里写东西总感觉不放心，好像一不小心就会丢了似的，实际上不用担心：打开的文件标签可以关闭重新打开，浏览器标签可以关闭甚至浏览器也可以整个关闭然后重新打开，文章是不会丢失的。&lt;/p&gt;
&lt;p&gt;写完切换到源代码管理标签，提交就行了，之前我们有设置好的发布工作流，运行完就可以看到文章了。&lt;/p&gt;
&lt;p&gt;比如这篇就是这样写的，也不是特别有用不过还行，特定场景下还是会有些作用的罢。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[用 gatsby 和 github workflow 写博客]]></title><description><![CDATA[这里是本博客的仓库。 之前用的也是 gatsby，自己改出来了一个 gatsby-starter-blog-typescript，但已经年久失修不想维护了。
于是直接把博客的清空了仓库，更新到最新的官方模板 gatsby-starter-blog。 安装 gatsby…]]></description><link>https://blakat.cc/write-and-publish-blog-with-gatsby-and-github-workflow/</link><guid isPermaLink="false">https://blakat.cc/write-and-publish-blog-with-gatsby-and-github-workflow/</guid><pubDate>Thu, 17 Dec 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;这里是本&lt;a href=&quot;/&quot;&gt;博客&lt;/a&gt;的&lt;a href=&quot;https://github.com/liuchong/myblog&quot;&gt;仓库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;之前用的也是 &lt;a href=&quot;https://www.gatsbyjs.com/&quot;&gt;gatsby&lt;/a&gt;，自己改出来了一个 &lt;a href=&quot;https://github.com/liuchong/gatsby-starter-blog-typescript&quot;&gt;gatsby-starter-blog-typescript&lt;/a&gt;，但已经年久失修不想维护了。
于是直接把博客的清空了仓库，更新到最新的官方模板 &lt;a href=&quot;https://github.com/gatsbyjs/gatsby-starter-blog&quot;&gt;gatsby-starter-blog&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;安装 gatsby&lt;/h3&gt;
&lt;p&gt;详细过程可以参考官方文档 &lt;a href=&quot;https://www.gatsbyjs.com/tutorial/&quot;&gt;https://www.gatsbyjs.com/tutorial/&lt;/a&gt;，我这里有完整的环境，只需要运行命令：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install -g gatsby-cli
gatsby new myblog https://github.com/gatsbyjs/gatsby-starter-blog&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行完了，把一些文件里面按照需要改一下就可以使用了：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content/assets/
src/components/bio.js
gatsby-config.js&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;预览一下：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;执行完命令打开 &lt;a href=&quot;http://localhost:8000/&quot;&gt;http://localhost:8000/&lt;/a&gt; 可以看到几个示范文章已经在那里了。&lt;/p&gt;
&lt;p&gt;我还在 &lt;code class=&quot;language-text&quot;&gt;static&lt;/code&gt; 目录放置了一些文件，它们会被原封不动的复制到网站目录。
比如 &lt;code class=&quot;language-text&quot;&gt;CNAME&lt;/code&gt; 用来在 github pages 绑定域名，后面会发布后就可以用到。&lt;/p&gt;
&lt;p&gt;安装完后，可以创建一个 github 仓库，我这里就是 &lt;code class=&quot;language-text&quot;&gt;myblog&lt;/code&gt;，把代码提交后推到仓库里。&lt;/p&gt;
&lt;h3&gt;写文章&lt;/h3&gt;
&lt;p&gt;我们看到，在 &lt;code class=&quot;language-text&quot;&gt;content/blog/&lt;/code&gt; 有一些目录，里面分别有一个 index.md，这就是文章了。比如我们参观一下这个 &lt;code class=&quot;language-text&quot;&gt;hello-world&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;---
title: Hello World
date: &amp;quot;2015-05-01T22:12:03.284Z&amp;quot;
description: &amp;quot;Hello World&amp;quot;
---

This is my first post on my new fake blog! How exciting!
... 此处省略很多字&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在这些展示文章的任务就圆满完成了，我们愿意的话可以把它们删除。然后比着它们的格式，打开咱喜欢的编辑器，写起来吧！&lt;/p&gt;
&lt;p&gt;安装一个工具 &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; 尝试发布一下，进行观赏：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;npm install --save gh-pages
npx gh-pages -b public -d public -r https://github.com/liuchong/myblog.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面命令用 gh-pages 工具把 public 目录发到了 public 分支，更详细可参考 &lt;a href=&quot;https://www.gatsbyjs.com/docs/how-gatsby-works-with-github-pages/&quot;&gt;https://www.gatsbyjs.com/docs/how-gatsby-works-with-github-pages/&lt;/a&gt;。
在项目设置里面设置 github pages 分支，点击显示出来的那个链接博客就出来了。&lt;/p&gt;
&lt;p&gt;到目前为止，还不错是吧！&lt;/p&gt;
&lt;h3&gt;设置 workflow&lt;/h3&gt;
&lt;p&gt;你看，写完有一步发布过程，挺麻烦的；而且什么时候没有环境或者甚至只有一个浏览器，那就发布不了了。&lt;/p&gt;
&lt;p&gt;幸亏有 github actions，用上它就方便多了。&lt;/p&gt;
&lt;p&gt;我直接把 workflow 配置文件 &lt;code class=&quot;language-text&quot;&gt;.github/workflows/publish.yml&lt;/code&gt; 贴到这里，假设源码提交到了 &lt;code class=&quot;language-text&quot;&gt;master&lt;/code&gt; 分支：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;name: Publish

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Publish
        run: |
          git config user.email ${{github.actor}}@users.noreply.github.com
          git config user.name ${{github.actor}}
          npm install
          npx gatsby build
          npx gh-pages -b public -d public -r https://${{ secrets.PUBLISH }}@github.com/${{ github.repository }}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要注意的是 &lt;code class=&quot;language-text&quot;&gt;secrets.PUBLISH&lt;/code&gt; 这个要手动在 &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;https://github.com/settings/tokens&lt;/a&gt; 创建 token，
然后再到项目里面，比如我就是在 &lt;a href=&quot;https://github.com/liuchong/myblog/settings/secrets/actions&quot;&gt;https://github.com/liuchong/myblog/settings/secrets/actions&lt;/a&gt;，添加一个 secrets 项，
&lt;code class=&quot;language-text&quot;&gt;Name&lt;/code&gt;那项就填的 &lt;code class=&quot;language-text&quot;&gt;PUBLISH&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;说明一下，这个链接 &lt;a href=&quot;https://docs.github.com/cn/free-pro-team@latest/actions/reference/authentication-in-a-workflow&quot;&gt;https://docs.github.com/cn/free-pro-team@latest/actions/reference/authentication-in-a-workflow&lt;/a&gt; 上面还有个 &lt;code class=&quot;language-text&quot;&gt;secrets.GITHUB_TOKEN&lt;/code&gt;，
说是自动创建的，不过我没有使用成功。&lt;/p&gt;
&lt;p&gt;如果发布有问题，可以试着手动执行一下命令测试，注意 &lt;code class=&quot;language-text&quot;&gt;***&lt;/code&gt; 改成自己的 secret：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gh-pages -b public -d public -r https://***@github.com/liuchong/myblog.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;从网页发布&lt;/h3&gt;
&lt;p&gt;到仓库页面 &lt;a href=&quot;https://github.com/liuchong/myblog/tree/master/content/blog&quot;&gt;https://github.com/liuchong/myblog/tree/master/content/blog&lt;/a&gt; 点击 &lt;strong&gt;Add file -&gt; Create new file&lt;/strong&gt; 然后填入 &lt;code class=&quot;language-text&quot;&gt;my-title/index.md&lt;/code&gt;，写就行了。&lt;/p&gt;
&lt;p&gt;我这篇博客就是在网页上面写的，其中 &lt;code class=&quot;language-text&quot;&gt;date&lt;/code&gt; 条目我手工写的，所以简化了一下，像 &lt;code class=&quot;language-text&quot;&gt;date: &amp;quot;2020-12-17&amp;quot;&lt;/code&gt; 这样也是可以的，不用那么精确。&lt;/p&gt;
&lt;p&gt;不太推荐直接在网页上面写，我写完后点击了一下 preview，又点回编辑界面时失败了一下，还以为文章没了，有点吓人 👀&lt;/p&gt;</content:encoded></item><item><title><![CDATA[simple snowflake in go and rust]]></title><description><![CDATA[https://github.com/liuchong/sf https://github.com/liuchong/fid]]></description><link>https://blakat.cc/simple-snowflake-in-go-and-rust/</link><guid isPermaLink="false">https://blakat.cc/simple-snowflake-in-go-and-rust/</guid><pubDate>Sat, 16 Mar 2019 17:39:21 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/liuchong/sf&quot;&gt;https://github.com/liuchong/sf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/liuchong/fid&quot;&gt;https://github.com/liuchong/fid&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[rewrite blockchain tutorial in rust]]></title><description><![CDATA[简单重写了个 Rust 版的 blockchain-tuorial 看了篇文章 https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc…]]></description><link>https://blakat.cc/rewrite-blockchain-tutorial-in-rust/</link><guid isPermaLink="false">https://blakat.cc/rewrite-blockchain-tutorial-in-rust/</guid><pubDate>Wed, 06 Mar 2019 04:44:30 GMT</pubDate><content:encoded>&lt;h1&gt;简单重写了个 Rust 版的 blockchain-tuorial&lt;/h1&gt;
&lt;p&gt;看了篇文章&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc&quot;&gt;https://medium.com/@mycoralhealth/code-your-own-blockchain-in-less-than-200-lines-of-go-e296282bcffc&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mycoralhealth/blockchain-tutorial&quot;&gt;https://github.com/mycoralhealth/blockchain-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;想着没几行代码，就用 Rust 简单写了下，写得不是多严谨。&lt;/p&gt;
&lt;p&gt;我的代码在
&lt;a href=&quot;https://github.com/liuchong/blockchain-tutorial&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/bomb.png&quot; alt=&quot;@liuchong/blockchain-tutorial&quot; width=&quot;32&quot; height=&quot;32&quot; align=&quot;bottom&quot;/&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[写一个第三方 cargo 子命令]]></title><description><![CDATA[动机 写项目的时候，有时候会写一些较长的 shell 命令，反复输入不方便，也容易丢失，就想着把它放到配置文件里。 动手 调研 阅读了 cargo 官方 wiki 阅读了 cargo 官方 reference 观察目录 ~/.cargo/bin…]]></description><link>https://blakat.cc/write-a-third-party-cargo-subcommand/</link><guid isPermaLink="false">https://blakat.cc/write-a-third-party-cargo-subcommand/</guid><pubDate>Tue, 18 Dec 2018 13:26:11 GMT</pubDate><content:encoded>&lt;h3&gt;动机&lt;/h3&gt;
&lt;p&gt;写项目的时候，有时候会写一些较长的 shell 命令，反复输入不方便，也容易丢失，就想着把它放到配置文件里。&lt;/p&gt;
&lt;h3&gt;动手&lt;/h3&gt;
&lt;h6&gt;调研&lt;/h6&gt;
&lt;p&gt;阅读了 cargo 官方 &lt;a href=&quot;https://github.com/rust-lang/cargo/wiki/Third-party-cargo-subcommands&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阅读了 cargo 官方 &lt;a href=&quot;https://doc.rust-lang.org/cargo/reference/external-tools.html&quot;&gt;reference&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;观察目录 ~/.cargo/bin/ 下面的文件，发现一些比如 racer、rls、rustfmt 等命令，是可以直接运行的，还有一些 cargo- 开头的命令，比如 cargo-clippy、cargo-fmt，就是运行 cargo clippy、cargo fmt 等命令时执行的程序。&lt;/p&gt;
&lt;p&gt;试一下，&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;cd ~/.cargo/bin/
ln -s racer cargo-racer
cargo racer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出比较不是很正常，看上去是把字符串“racer”当做参数传给了命令 racer，不过也对刚才的调查做了简单证实。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;error: Found argument &amp;#39;racer&amp;#39; which wasn&amp;#39;t expected, or isn&amp;#39;t valid in this context

USAGE:
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6&gt;编码&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;创建项目 cargo new cargo-x&lt;/li&gt;
&lt;li&gt;写代码&lt;/li&gt;
&lt;li&gt;发布项目 cargo publish&lt;/li&gt;
&lt;/ol&gt;
&lt;h6&gt;仓库&lt;/h6&gt;
&lt;p&gt;写了一个非常简单的版本，代码在
&lt;a href=&quot;https://github.com/liuchong/cargo-x&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/images/bomb.png&quot; alt=&quot;@liuchong/cargo-x&quot; width=&quot;32&quot; height=&quot;32&quot; align=&quot;bottom&quot;/&gt;&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ngrok tunnels example]]></title><description><![CDATA[Created an example repository of simple ngrok tunnels on github:
ngrok-tunnels-example Note: Maybe frp is a better choice.]]></description><link>https://blakat.cc/ngrok-tunnels-example/</link><guid isPermaLink="false">https://blakat.cc/ngrok-tunnels-example/</guid><pubDate>Tue, 10 Jul 2018 13:16:55 GMT</pubDate><content:encoded>&lt;p&gt;Created an example repository of simple ngrok tunnels on github:
&lt;a href=&quot;https://github.com/liuchong/ngrok-tunnels-example&quot;&gt;ngrok-tunnels-example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;
Maybe &lt;a href=&quot;https://github.com/fatedier/frp&quot;&gt;frp&lt;/a&gt; is a better choice.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[nginx router example]]></title><description><![CDATA[Created an example repository of simple dynamic routing application to show the usage of openresty on github:
ngx-router-example]]></description><link>https://blakat.cc/nginx-router-example/</link><guid isPermaLink="false">https://blakat.cc/nginx-router-example/</guid><pubDate>Mon, 06 Mar 2017 01:33:15 GMT</pubDate><content:encoded>&lt;p&gt;Created an example repository of simple dynamic routing application to show the usage of openresty on github:
&lt;a href=&quot;https://github.com/liuchong/ngx-router-example&quot;&gt;ngx-router-example&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>